<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//NETWORKING!
client = network_create_socket(network_socket_tcp);
var network = network_connect_raw(client, "irc.twitch.tv", 6667);            //Establish network connection
if (network &gt;= 0){
    show_debug_message("Connection successful.");
}else{
    show_debug_message("Connection failed.");  
    game_restart(); //lazy fix
}

sendMessage("PASS oauth:" + BROADCASTER_OAUTH, 1);                           //Twitch pass
sendMessage("USER " + BROADCASTER_NAME + " 0 * :" + BROADCASTER_NAME, 1);    //USER
sendMessage("NICK " + BROADCASTER_NAME, 1);                                  //NICK
sendMessage("JOIN " + CHANNEL_NAME, 1);                                      //Join our channel...
sendMessage("CAP REQ :twitch.tv/tags", 1);                                   //IRCv3 tag support
/////////////

//load user data
userList = ds_list_create();
global.users[0] = -1;
ini_open("data.ini");
var temp = ini_read_string("data", "userdata", "");
if (temp != "") then ds_list_read(userList, temp);

global.wordNum = ini_read_real("save", "num", 0);
global.wordBest = ini_read_real("save", "best", 0);

ini_close();
if (ds_list_size(userList) &gt; 0){
    for (var i = 0; i &lt; ds_list_size(userList); i++){
        global.users[i] = ds_map_create();
        ds_map_read(global.users[i], userList[| i]);
        set_data(i, "activeTimer", 0);
    }
}else{
    global.users[0] = ds_map_create();               
}
ds_list_destroy(userList);
///////////////////////////////////

//set attributes for bot user
set_data(0, USER_AT_NAME, string_lower(BROADCASTER_NAME));
set_data(0, USER_AT_ACTIVETIMER, 0);
set_data(0, USER_AT_COMMANDTIMER, 0);
set_data(0, USER_AT_SCORE, 500);
set_data(0, USER_AT_TAGNAME, BROADCASTER_NAME);
//

activePlayerList = ds_list_create();   //list of active players
global.messageDraw = ds_list_create(); //bottom message queue
commandBuffer = ds_list_create();      //raw IRC command buffer
global.leaderboard = ds_grid_create(2, USERS_NUM); //create the leaderboard data structure

//voting period timer and limit
global.voteTimerMax = sec(30); 
global.voteTimer = sec(30);

letterVoteGrid = ds_grid_create(2, 26); //data structure for managing letters guessed by players

//just UI stuff...
voteGraphicsFade = 1;
guessLetterFade = 0;
guessLetterSin = 0;
topMessageState = 0;
topMessageAlp = 0;
topMessage = "";
wordValIntensity = 0;
uiActiveIntensity = 0;
uiHangmanIntensity = 0;
uiWordNumIntensity = 0;
uiBestIntensity = 0;
voteTimerSegmentAlp[204] = 1; 
winPts = 0;
global.letterSin = 0;
global.voteSin = 0;
colorRoll = 0; //background hue...
gameoverOverlayFadeState = 0; 
gameoverOverlayFade = 1;    
////////////////////

nextWord = 0;
activePlayers = 0;

///phase frame positions
hangmanPhaseFrame[0] = 0;
hangmanPhaseFrame[1] = 33;
hangmanPhaseFrame[2] = 69;
hangmanPhaseFrame[3] = 88;
hangmanPhaseFrame[4] = 98;
hangmanPhaseFrame[5] = 111;
hangmanPhaseFrame[6] = 126;  
hangmanPhaseFrame[7] = 134;
hangmanPhaseFrame[8] = 139;
hangmanPhaseFrame[9] = 144;
hangmanPhaseFrame[10] = 146; 
hangmanPhaseFrame[11] = 152;
hangmanPhaseFrame[12] = 156;
hangmanPhaseFrame[13] = 161;

////STATS
time = 0;                                // round time
reset_stats();                           // reset stats
load_stats();                            // re-load today's stats (in case of crash)
/////////

lastHour = current_hour;                 //hour last step (midnight checking)
lastDay = current_day;                   //day last step 

global.guessState = 0;                   //letter guessing animation state

alarm[1] = sec(60);                      //ping...
alarm[10] = sec(30);                     //...pong
pongReceived = 0;                        //pong counter
alarm[11] = sec(600);                    //random fact

usedLetters = "";                        //letters used in current round
wordDifficulty = WORD_DIFFICULTY_NORMAL; //word difficulty
global.gameState = GAME_STATE_VOTING;    //accept votes
new_word();                              //generate new word
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sendMessage("Did you know...   " + choose("You can use the !pts command to see how many points you have!", "No one is stopping you from following Blokatt on Twitter!", "Blokatt likes to talk about himself in 3rd person.", "Blokatt likes cookies.", "Even though Blokatt's been making games since he was 10, he's never released a game that wasn't made for a game jam.", "You should stop reading this and pay attention to the game.", "Blokatt has a website - blokatt.net.", "Blokatt's even got a personal twitch account - twitch.tv/blokatt", "Venturesomeness is apparently a real word. DansGame"), 3);

alarm[11] = sec(1200);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pongReceived ++;
if (pongReceived &gt; 2) then game_restart();
alarm[10] = sec(30);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gameoverOverlayFadeState = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gameoverDropFadeState = 1;
alarm[9] = sec(7);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>guessUserNameFadeState = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>new_word(1); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>win_state();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wordMeltFadeState = 1;
alarm[5] = sec(3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>topMessageState = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// LETTER GUESSING ANIMATION

switch (global.guessState) {
    case 0:
        // wait a bit
        global.guessState = 1;
        alarm[2] = sec(1);
        break;
        
    case 1:
        // storing used letters 
        usedLetters += global.check;
        global.guessState = 2;
        alarm[2] = 1;
        break;
        
    case 2:
        // dot animation 
        if (guessDots &lt; 5) {
            guessDots++;
            alarm[2] = sec(.4);
        } else {
            global.guessState = 3;
            alarm[2] = 1;
        }
        break;
        
    case 3:
        // check/cross animation
        var count = string_count(global.check, global.word);
        
        if (count &gt; 0) {
            global.exists = 0;
            with(objLetter) {
                if (global.check = character &amp;&amp; revealed == 1)
                    global.exists = 1;
            }
            if (!global.exists) {
                guessSignSub = 0;
                guessSignSpr = sprCheck;

                with(objLetter) {
                    if (character = global.check) then revealed = 1;
                }
            }
        } else {
            guessSignSub = 0;
            guessSignSpr = sprCross;
        }
        
        global.clear = 1;

        with(objLetter) {
            if (!revealed)
                global.clear = 0;
        }
        
        if (global.clear) {
            alarm[2] = sec(1);
        }else{
            alarm[2] = sec(2.5);
        }
        
        global.guessState = 4;
        
        break;

    case 4:
        if (guessSignSpr == sprCross) { //wrong letter (bad coding, I know)
            var str = "";
            var val = get_letter_value(global.check);
            for (var i = 0; i &lt; ds_list_size(letter[ord(global.check) - 65]); i++) {
                var name = ds_list_find_value(letter[ord(global.check) - 65], i);

                str += get_data(user_get_id(name), USER_AT_TAGNAME);

                if (i &lt; ds_list_size(letter[ord(global.check) - 65]) - 2) {
                    str += ", ";
                }

                if (i == ds_list_size(letter[ord(global.check) - 65]) - 2) {
                    str += " &amp; ";
                }


                set_data(user_get_id(name), USER_AT_SCORE, max(0, get_data(user_get_id(name), USER_AT_SCORE) - val));
            }
            var loseString = " lose ";

            if (i == 1) {
                loseString = " loses ";
            }

            var str2 = str + loseString + string(val);
            str = str + loseString + get_wide_numbers(string(val));
            if (val == 1) {
                str += " point.";
                str2 += " point.";
            } else {
                str += " points.";
                str2 += " points.";
            }

            if (i &gt; 10) {
                str += " Kappa";
            }

            topMessageState = 1;
            topMessage = str2;
            


            uiHangmanIntensity = 1;
            hangmanPhase++;
            hangManFieldFadeState = 1;

            global.clear = 1;
            
            global.guessState++;

            if (hangmanPhase != 13) {
                alarm[2] = sec(1);
            } else {
                if (irandom(100) == 0)
                    instance_create(0, 0, objKappa);
                global.gameState = GAME_STATE_LOSE;
                global.finalWordStatus = "lost";
                alarm[8] = sec(2);
                gameoverFadeState = 1;
            }
            alarm[3] = sec(5);
        }

        if (guessSignSpr == sprCheck) { //right letter
            //add score
            var str = "";
            var val = get_letter_value(global.check) * string_count(global.check, global.word) * 5;

            for (var i = 0; i &lt; ds_list_size(letter[ord(global.check) - 65]); i++) {
                var name = ds_list_find_value(letter[ord(global.check) - 65], i);

                str += get_data(user_get_id(name), USER_AT_TAGNAME);

                if (i &lt; ds_list_size(letter[ord(global.check) - 65]) - 2) {
                    str += ", ";
                }

                if (i == ds_list_size(letter[ord(global.check) - 65]) - 2) {
                    str += " &amp; ";
                }

                set_data(user_get_id(name), USER_AT_SCORE, get_data(user_get_id(name), USER_AT_SCORE) + val);
            }
            var loseString = " get ";

            if (i == 1) {
                loseString = " gets ";
            }

            var str2 = str + loseString + string(val);
            str = str + loseString + get_wide_numbers(string(val));
            if (val == 1) {
                str += " point.";
                str2 += " point.";
            } else {
                str += " points.";
                str2 += " points.";
            }

            if (i &gt; 10) {
                str += " 4Head";
            }

            topMessageState = 1;
            topMessage = str2;
            alarm[3] = sec(5);

            global.clear = 1;

            with(objLetter) {
                if (!revealed)
                    global.clear = 0;
            }

            if (!global.clear) {
                global.guessState++;
                alarm[2] = sec(1);
            }

            if (global.clear) {
                alarm[4] = sec(1);
                global.gameState = GAME_STATE_WIN;
                global.finalWordStatus = "win";
            }
        }

        for (var i = 0; i &lt; 26; i++) {
            ds_list_clear(letter[i]);
        }
        with(objMessage) {
            instance_destroy();
        }
        ds_list_clear(global.messageDraw);

        global.guessState = 5;
        break;

    case 5:
        // open voting 
        global.gameState = GAME_STATE_VOTING;
        bottomMessage("VOTING IS OPEN!");
        sendMessage("VOTING IS OPEN!", 3);
        guessLetterFade = 0;
        guessDots = 0;
        global.guessState = 0;
        guessSignSub = 0;
        guessSignSpr = -1;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sendMessage("PING irc.twitch.tv", 1);
alarm[1] = sec(20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lastHour = current_hour;
lastDay = current_day;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OTHER

//midnight checking
if (current_hour != lastHour){
   save_data(lastDay, lastHour);
   reset_stats();
}

if (global.gameState == GAME_STATE_VOTING){
   if (mainFadeState == 0){
      mainFade += (0 - mainFade) / 20;   
      if (mainFade &lt; .001) then mainFade = 0;
   } 
}

if (global.gameState == GAME_STATE_WIN){
   if (mainFadeState == 0){
      mainFade += (1 - mainFade) / 20;   
   } 
   
}

if (gameoverFadeState){
   gameoverFade += (1 - gameoverFade) / 20;
}

if (global.gameState == GAME_STATE_VOTING || global.gameState == GAME_STATE_GUESS){
   stats_wordTimer ++;
}

uiHangmanIntensity -= uiHangmanIntensity / 10;
uiWordNumIntensity -= uiWordNumIntensity / 10;
uiBestIntensity -= uiBestIntensity / 10;
uiActiveIntensity -= uiActiveIntensity / 10;
wordValIntensity -= wordValIntensity / 10;

hangmanSub = min(hangmanSub + .5, hangmanPhaseFrame[hangmanPhase]);

if (guessUserNameFadeState){
   guessUserNameFade += (1 - guessUserNameFade) / 20; 
}else{
   guessUserNameFade = max(0, guessUserNameFade - (1 - (guessUserNameFade * (guessUserNameFade * 1.01) + .0001)));   
}

if (topMessageState &amp;&amp; !gameoverFadeState){
   topMessageAlp += (1 - topMessageAlp) / 20;
}else{
   topMessageAlp += (0 - topMessageAlp) / 20;
   if (topMessageAlp &lt; .001){
      topMessageAlp = 0;
      topMessage = "";
   }
}

if (gameoverOverlayFadeState){
   gameoverOverlayFade = min(gameoverOverlayFade + .01, 1.5);
   if (gameoverOverlayFade == 1.5){
      global.wordNum = -1;
      gameoverOverlayFadeState = 0;   
      new_word(1);
   }
}else{
  gameoverOverlayFade = max(gameoverOverlayFade - .01, 0);    
}

if (highscoreFadeState){
   highscoreFade = min(highscoreFade + .05, 1);
}else{
   highscoreFade = max(highscoreFade - .05, 0);
   
   if (highscoreFade == 0 &amp;&amp; global.gameState == GAME_STATE_WIN &amp;&amp; nextWord &amp;&amp; wordDifficulty == WORD_DIFFICULTY_HARD){
      //new_word(1);
   }
}

if (wordMeltFadeState){
   wordMeltFade = min(1, wordMeltFade + wordMeltFade * (wordMeltFade * 1.01) + .0001);
}


if (global.guessState == 4){
   guessSignSub = min(sprite_get_number(guessSignSpr) - 1, guessSignSub + .5);
}

if (voteTimerActive){
   global.voteTimer --;
   voteGraphicsFade -= voteGraphicsFade / 10;  
   
   if (global.voteTimer &lt;= 0){
      voteTimerActive = 0;    
      bottomMessage("VOTING IS OVER!");
      sendMessage("VOTING IS OVER!", 3);
      global.guessState = 0;
      guessSignSpr = 0;
      alarm[2] = sec(2);
      global.check = chr(UNICODE_UPPERCASE_OFFSET + letterVoteGrid[# 0, 0]);
      global.gameState = GAME_STATE_GUESS;
   }
   
}else{
   voteGraphicsFade += ((1 - voteGraphicsFade) / 20) * (voteGraphicsFade + .2);   
}

if (global.guessState != 0 &amp;&amp; global.guessState != 5 &amp;&amp; global.gameState != GAME_STATE_WIN){
   guessLetterFade += (1 - guessLetterFade) / 10;
}else{
   guessLetterFade = max(0, guessLetterFade - (1 - guessLetterFade + .01) / 10);
}

if (gameoverDropFadeState){
   for (var i = 0; i &lt; 9; i++){
        if (gameoverDropY[i] + gameoverDropVspeed[i] &lt; 500){
          gameoverDropVspeed[i] += .5;   
        }else{
          gameoverDropVspeed[i] = -gameoverDropVspeed[i] / 1.5;   
        }
        gameoverDropY[i] += gameoverDropVspeed[i];
   }
} 

global.letterSin += .1;
global.voteSin += .08 + ( 1 - global.voteTimer / global.voteTimerMax) * .2;
colorRoll = colorRoll + 1;

for (var i = 0; i &lt; USERS_NUM; i++){
   set_data(i, USER_AT_ACTIVETIMER, max(0, get_data(i, USER_AT_ACTIVETIMER) - 1));    
   set_data(i, USER_AT_COMMANDTIMER, max(0, get_data(i, USER_AT_COMMANDTIMER) - 1));    
}

if (hangManFieldFadeState &amp;&amp; global.gameState != GAME_STATE_WIN){
   hangManFieldFade += (1 - hangManFieldFade) / 20;
}


time += .5;

background_blend[0] = make_colour_hsv((colorRoll / 20) mod 255, 20, 255)
background_alpha[0] = 1 - guessLetterFade / 2;
guessLetterSin += .05;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COMMAND BUFFER PROCESSING
while (ds_list_size(commandBuffer) &gt; 0){
    var data = commandBuffer[| 0];
     
    if (string_count("PONG", data)){
       pongReceived = 0;
       alarm[10] = sec(25);   
    }
    
    if (string_count("JOIN " + CHANNEL_NAME, data)){
         var ex = string_pos("!", data);
         var user = string_copy(data, 2, ex - 2);
         var usrNew = check_user_new(user);
    }

    if (string_count("PART " + CHANNEL_NAME, data)){
        var ex = string_pos("!", data);
        var user = string_copy(data, 2, ex - 2);
        show_debug_message("USER DISCONNECTED: " + user);
        set_data(user_get_id(user), USER_AT_ACTIVETIMER, 0);   
    }
    
    if (string_count("PRIVMSG " + CHANNEL_NAME, data)){
        var messageIndex = string_pos(CHANNEL_NAME, data) + string_length(CHANNEL_NAME) + 2;
        var message = string_copy(data, messageIndex, string_length(data) - messageIndex - 1);  
        var lng = string_length(message);
        
        var fixName = 0;
       
        var subMes = string_copy(data, string_pos("user-type= :", data) + 12, (string_pos("user-type= :", data) + 12) - (string_length(data) - string_pos("PRIVMSG", data)));
        
        if (string_count("user-type=mod :",data)){
           show_debug_message("found mod");
           subMes = string_copy(data, string_pos("user-type=mod :", data) + 15, (string_pos("user-type=mod :", data) + 15) - (string_length(data) - string_pos("PRIVMSG", data)));
           show_debug_message(subMes);
           show_debug_message("found mod end");
           fixName = 1;
        }else{
           if (string_count("display-name=;", data)){
              show_debug_message("fixed name");
              fixName = 1;     
           } 
        }
        
        var ex = string_pos("!", subMes);
        var userIRC = string_copy(subMes, 1, ex - 1);
        userIRC = string_replace(userIRC, string_char_at(userIRC, 1), string_upper(string_char_at(userIRC, 1)));
        
        
        var DisplayUserName = getTag("display-name", data);
        var user = string_lower(getTag("display-name", data));
        
        if (string_count(":", DisplayUserName) &gt; 0 || fixName){
           show_debug_message("fixed name");
           DisplayUserName = userIRC;
           user = string_lower(userIRC);
           show_debug_message(userIRC);
        }
        
        var usrNew = check_user_new(user);
        
        if (usrNew){
           sendMessage(choose("Hello there, ", "Everybody say hi to ", "Welcome to the game, ") + DisplayUserName + "!", 2);
           set_data(user_get_id(user), USER_AT_TAGNAME, DisplayUserName);    
        }
        set_data(user_get_id(user), USER_AT_ACTIVETIMER, sec(60));   
        if (activePlayers != active_player_count()){
           activePlayers = active_player_count();
           uiActiveIntensity = 1;
        }
        
        var pos = -1;
        pos = user_get_id(user);
        
        show_debug_message("MESSAGE: " + message + " FROM: " + string(pos));
        
        if (global.gameState == GAME_STATE_VOTING){
            if (string_length(string_letters(message)) == 1){ 
               var arg0 = string_upper(string_char_at(message, 1));

               if (string_letters(arg0) != ""){
                   if (string_length(arg0) == 1){
                       
                       ///check if this user has already voted
                       var same = 0;
                       var exists = 0;
                       var letterUsed = 0;
                       
                       global.check = arg0;
                       
                       if (string_count(global.check, usedLetters) != 0){
                          letterUsed = 1;
                       }
                       
                       if (!letterUsed){
                           for (var i = 0; i &lt; 26; i++){
                               for (var ii = 0; ii &lt; ds_list_size(letter[i]); ii++){
                                   if (ds_list_find_value(letter[i], ii) == user){
                                      exists = 1;
                                      if (string_upper(chr(i + UNICODE_UPPERCASE_OFFSET)) == arg0){
                                         same = 1;
                                         break;
                                      }else{
                                         stats_letterCount[i] = max(0, stats_letterCount[i] - 1);   
                                         ds_list_delete(letter[i], ii);   
                                      }
                                   }                              
                               }
                               if (exists) then break; 
                           } 
                           ///
                           
                           if (!same){
                               //add their name to the corresponding list
                               var charID = ord(string_char_at(arg0, 1)) - UNICODE_UPPERCASE_OFFSET;
                               letterIntensity[charID] = 1;
                               ds_list_add(letter[charID], user);
                               stats_letterCount[charID] ++;
                               stats_letterCountWithChanges[charID] ++; 
                               //
                               
                               if (!exists){
                                  bottomMessage(DisplayUserName + ' voted for "' + arg0 + '"');
                               }else{
                                  bottomMessage(DisplayUserName + ' changed their vote to "' + arg0 + '"');   
                               }
                           }
                           
                           if (!voteTimerActive){
                              global.voteTimer = sec(30);
                              sendMessage("You have 30 seconds to vote.", 3);
                              if (firstLetter = "none")
                              firstLetter = string_lower(arg0);
                              global.voteTimerMax = global.voteTimer;
                              voteTimerActive = 1;
                           }
                                                   
                           ds_grid_clear(letterVoteGrid, 0);
    
                           for (var i = 0; i &lt; 26; i++){
                               letterVoteGrid[# 0, i] = i;
                               letterVoteGrid[# 1, i] = ds_list_size(letter[i]);
                           }
                           ds_grid_sort(letterVoteGrid, 1, 0);
                       }
                   }
               }
            }
            
           if (check_command(message, "!guess")){
               if (string_length(message) &gt; 7){
                   var guessSub = string_copy(message, 8, string_length(message) - 7);
                   var arg0 = getArg(message, 6, 0, TYPE_NUMBER);
                   if (arg0 == -1 || arg0 &lt; get_word_value(global.word)){
                      arg0 = get_word_value(global.word);
                   }
                   
                   var arg1 = "";

                   if (string_length(guessSub) &gt; 1 &amp;&amp; string_letters(guessSub) != ""){
                       guessSub = string_replace_all(guessSub, "0", "");
                       guessSub = string_replace_all(guessSub, "1", "");
                       guessSub = string_replace_all(guessSub, "2", "");
                       guessSub = string_replace_all(guessSub, "3", "");
                       guessSub = string_replace_all(guessSub, "4", "");
                       guessSub = string_replace_all(guessSub, "5", "");
                       guessSub = string_replace_all(guessSub, "6", "");
                       guessSub = string_replace_all(guessSub, "7", "");
                       guessSub = string_replace_all(guessSub, "8", "");
                       guessSub = string_replace_all(guessSub, "9", "");
                       
                       show_debug_message(guessSub);
                       
                       var index = 0;
                       
                       if (getArg(message, 6, 0, TYPE_NUMBER) != -1){
                          index = 2;
                       }
                            
                       arg1 = string_upper(string_copy(guessSub, index, string_length(message) - index));
                       if (string_length(arg1) &gt; 20) arg1 = string_copy(arg1, 1, 20);  
                       
                       
                       show_debug_message(arg0);
                       show_debug_message(arg1);
                   
                       if (get_data(user_get_id(user), USER_AT_SCORE) &gt;= arg0){
                          
                          if (arg1 != global.word){                     
                             if (topMessageAlp != 0){
                                topMessage += "#";
                                if (string_count("#", topMessage) &gt; 15){
                                   topMessage = "";
                                }
                             }
                             wordValExtra += 20;
                             global.wordVal = get_word_value(global.word);
                             wordValIntensity = 1;
                             topMessageState = 1;
                             topMessage += DisplayUserName + " guessed incorrectly and loses " + string(arg0) + " points!";
                             sendMessage(DisplayUserName + ": You lose " + string(arg0) + " points! " + choose("Kappa", "4Head", "DansGame", "BibleThump", "FeelsBadMan", "FailFish", "ResidentSleeper", "", "", "", "", ""), 2);
                             set_data(user_get_id(user), USER_AT_SCORE, max(0, get_data(user_get_id(user), USER_AT_SCORE) - arg0));
                             alarm[3] = sec(5);
                          }else{
                             with (objLetter){
                                  revealed = 1;
                             }     
                             sendMessage("VOTING IS OVER!", 3);
                             global.gameState = GAME_STATE_WIN;   
                             voteTimerActive = 0;
                             global.finalWordStatus = "guess";
                             with (objMessage){
                                  fade = -1;
                             }
                             guessUserNameFadeState = 1;
                             guessUserName = DisplayUserName;
                             winPts = arg0;
                             alarm[7] = sec(4);
                             
                             sendMessage(DisplayUserName + ": You get " + string(arg0) + " points! " + choose("FeelsGoodMan", "MVGame", "PogChamp", "", "", "", ""), 2);
                             sendMessage(DisplayUserName + " guessed the word correctly!", 3);
                             set_data(user_get_id(user), USER_AT_SCORE, max(0, get_data(user_get_id(user), USER_AT_SCORE) + arg0));
                             alarm[4] = sec(2);       
                          }
                          
                       }else{
                           sendMessage(DisplayUserName + ": You don't have enough points!", 2);  
                       }     
                   }
               }  
           }
        }
        
        if (check_command(message, "!myscore") || check_command(message, "!pts") || check_command(message, "!score")){
           if (get_data(pos, USER_AT_COMMANDTIMER) == 0){
              highscoreGrid = ds_grid_create(2, USERS_NUM);

              for (var i = 0; i &lt; USERS_NUM; i++){
                  highscoreGrid[# 0, i] = get_data(i, USER_AT_TAGNAME); 
                  highscoreGrid[# 1, i] = get_data(i, USER_AT_SCORE);
              }    
            
              ds_grid_sort(highscoreGrid, 1, 0);
              
              var position = "";
              
              for (var i = 0; i &lt; ds_grid_height(highscoreGrid); i++){
                  if (highscoreGrid[# 0, i] = DisplayUserName){
                     position = string(i + 1);
                     break;
                  }
              }
              set_data(pos, USER_AT_COMMANDTIMER, sec(60)); 
              sendMessage(DisplayUserName + ": Your score is " + string(get_data(pos, USER_AT_SCORE)) + " (Place: " + position + "/" + string(ds_grid_height(highscoreGrid)) + ").", 2);
              ds_grid_destroy(highscoreGrid);
           }
        } 
    }    
    show_debug_message(data);
    ds_list_delete(commandBuffer, 0);
}


//UI stuff...
for (var i = 0; i &lt; 26; i++){
    letterIntensity[i] -= letterIntensity[i] / 10;
    letterPos[letterVoteGrid[# 0, i]] += (i - letterPos[letterVoteGrid[# 0, i]]) / 4;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Buffering incoming data for processing
var preData = ds_map_find_value(async_load, "buffer");
var data = buffer_read(preData, buffer_string);
if (string_length(data) &gt; 0){
   ds_list_add(commandBuffer, data);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>save_data();
for (var i = 0; i &lt; 26; i++){
    ds_list_destroy(letter[i]);
} 
ds_grid_destroy(global.leaderboard);
ds_grid_destroy(letterVoteGrid);
ds_list_destroy(userList);
ds_list_destroy(global.messageDraw);
ds_list_destroy(commandBuffer);
ds_list_destroy(global.wordList);
ds_list_destroy(global.wordListHard);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DRAW EVERYTHING, oh boy
var char;
var w = display_get_gui_width();
var h = display_get_gui_height();
var sz = ds_list_size(global.messageDraw);

if (global.gameState != GAME_STATE_WIN) {
    shader_set(shaderScribblySprite);
    shader_set_uniform_f(shader_get_uniform(shaderScribblySprite, "time"), time);
    shader_set_uniform_f(shader_get_uniform(shaderScribblySprite, "subWidth"), 150.0);

    texture_set_interpolation(0);
    draw_sprite_ext(sprHangman, hangmanSub, w / 2 + 5 - (1 - voteGraphicsFade) * 80, h / 2 - 140 - 50 * guessLetterFade - 200 * mainFade + 50 * gameoverFade, 2, 2, 0, c_white, .3 * ((hangManFieldFade - guessLetterFade)));
    draw_sprite_ext(sprHangman, hangmanSub, w / 2 - (1 - voteGraphicsFade) * 80, h / 2 - 140 - 50 * guessLetterFade - 200 * mainFade + 50 * gameoverFade, 2, 2, 0, c_white, (hangManFieldFade - guessLetterFade));
    texture_set_interpolation(1);
    shader_reset();
}

draw_set_font(fntMain);

shader_set(shaderScribbly);
shader_set_uniform_f(shader_get_uniform(shaderScribbly, "time"), time);


draw_set_halign(fa_left);
if (gameoverDropFadeState) {
    draw_set_font(fntWord);
    draw_set_valign(fa_middle);
    var gameOverOffset = string_width("GAME OVER") / 2;
    var letterOffset = 0;
    for (var i = 1; i &lt;= 9; i++) {
        draw_text_shadow(w / 2 - gameOverOffset + letterOffset, gameoverDropY[i - 1], string_char_at("GAME OVER", i), 1);
        letterOffset += string_width(string_char_at("GAME OVER", i));
    }
    draw_set_valign(fa_top);
    draw_set_font(fntMain);
}


draw_set_colour(c_black);

for (var i = 0; i &lt; sz; i++) {
    with(global.messageDraw[| i]) {
        draw_set_colour(c_black);
        draw_set_alpha(yy);
        draw_text_shadow(20 + xx * w, h - 40 + 20 - yy * 20 + objControl.guessLetterFade * 40, text, yy);
        var pointValue = string(points);

        if (points &gt; 0) {
            pointValue = "+" + pointValue;
            draw_set_colour($4EA174);
        } else {
            draw_set_colour($6A67F2);
        }
        if (points != 0) {
            draw_set_halign(fa_left);
            draw_text_shadow(20 + xx * w + string_width(text) + 10, h - 40 + 20 - yy * 20 + objControl.guessLetterFade * 40, pointValue, yy);
        }
        draw_set_colour(c_black);

        if (i != sz - 1) {
            var otherYY = global.messageDraw[| i + 1].yy;
            draw_text_shadow(20 + xx * w + string_width(text) + (string_width(pointValue) * (points != 0)) + 15 + 5 * (points != 0), h - 40 + 20 - otherYY * 20 + objControl.guessLetterFade * 40, "|", otherYY);
            draw_set_alpha(1);
        }
        draw_set_alpha(1);
    }
}
draw_set_halign(fa_left);

draw_set_font(fntTiny);
draw_text_shadow_w(20, 20 + 20 * topMessageAlp, topMessage, topMessageAlp, 1240 - 200 * voteGraphicsFade);

draw_set_font(fntMain);
draw_text_shadow_transformed(20, 10, "Word number:            | Best:            | Hangman phase:    /    | Active players: ", 1.07, 1, 0, 1, 4);



for (var i = 0; i &lt; 6; i++) {
    var str = string(global.wordNum + 1);
    var str2 = "";
    repeat(6 - string_length(string(global.wordNum + 1))) {
        str2 += "0";
    }
    str = str2 + str;
}

var off = 0;

for (var i = 1; i &lt;= 6; i++) {
    char = string_char_at(str, i);
    draw_set_colour(make_colour_hsv((i * 20 + colorRoll) mod 255, 200, 80));
    draw_text_shadow_transformed(223 + off, 10 + random_range(-uiWordNumIntensity, uiWordNumIntensity) * 10, char, 1.07, 1, 0, 1, 4);
    off += string_width(char);
}

////

for (var i = 0; i &lt; 6; i++) {
    var str = string(activePlayers);
    var str2 = "";
    repeat(6 - string_length(string(activePlayers))) {
        str2 += "0";
    }
    str = str2 + str;
}

var off = 0;

for (var i = 1; i &lt;= 6; i++) {
    char = string_char_at(str, i);
    draw_set_colour(make_colour_hsv((180 + i * 20 + colorRoll) mod 255, 200, 80));
    draw_text_shadow_transformed(1145 + off, 10 + random_range(-uiActiveIntensity, uiActiveIntensity) * 10, char, 1.07, 1, 0, 1, 4);
    off += string_width(char);
}


////
for (var i = 0; i &lt; 6; i++) {
    var str = string(global.wordBest + 1);
    var str2 = "";
    repeat(6 - string_length(string(global.wordBest + 1))) {
        str2 += "0";
    }
    str = str2 + str;
}

var off = 0;

for (var i = 1; i &lt;= 6; i++) {
    char = string_char_at(str, i);
    draw_set_colour(make_colour_hsv((120 + i * 20 + colorRoll) mod 255, 200, 80));
    draw_text_shadow_transformed(435 + off, 10 + random_range(-uiBestIntensity, uiBestIntensity) * 10, char, 1.07, 1, 0, 1, 4);
    off += string_width(char);
}




////

for (var i = 0; i &lt; 2; i++) {
    var str = string(hangmanPhase);
    var str2 = "";
    repeat(2 - string_length(string(hangmanPhase))) {
        str2 += "0";
    }
    str = str2 + str;
}
draw_set_halign(fa_right);
draw_set_colour(make_colour_hsv((240 + i * 20 + colorRoll) mod 255, 200, 80));
draw_text_shadow_transformed(849, 10 + random_range(-uiHangmanIntensity, uiHangmanIntensity) * 10, str, 1.07, 1, 0, 1, 4);
draw_set_halign(fa_left);
////

for (var i = 0; i &lt; 2; i++) {
    var str = string(global.wordBest + 1);
    var str2 = "";

    str = str2 + str;
}

draw_set_colour(make_colour_hsv((280 + i * 20 + colorRoll) mod 255, 200, 80));
draw_text_shadow_transformed(867, 10 + random_range(-uiHangmanIntensity, uiHangmanIntensity) * 10, "13", 1.07, 1, 0, 1, 4);


draw_set_colour(c_black);
draw_set_font(fntWord);
global.width = 0;
for (var i = 1; i &lt;= string_length(global.word); i++) {
    global.width += (string_width(string_char_at(global.word, i - 1))) + 5;
}


draw_set_font(fntMain);
//draw_set_halign(fa_center);
if (global.gameState != GAME_STATE_LOSE) {
    var tempStr = "Word value: " + string(global.wordVal);
    var lenBuf = 0;
    for (var i = 1; i &lt;= string_length(tempStr); i++) {
        var col = c_black;
        var char = string_char_at(tempStr, i);

        if (string_digits(char) != "") {
            col = make_colour_hsv((120 + i * 20 + colorRoll) mod 255, 200, 80);
        }
        draw_set_colour(col);
        draw_text_shadow_transformed(round(display_get_gui_width() / 2) + sin(global.letterSin + i / 10) * 5 + 1000 * (guessLetterFade + mainFade) - string_width(tempStr) / 2 + lenBuf - (1 - voteGraphicsFade) * 80, display_get_gui_height() / 2 + 100 + 100 * hangManFieldFade + random_range(-wordValIntensity, wordValIntensity) * 5, char, 1, 1, 0, 1, 5);
        lenBuf += string_width(char);
    }

    tempStr = "Word difficulty: Hard";
    if (wordDifficulty == WORD_DIFFICULTY_NORMAL) then tempStr = "Word difficulty: Normal";
    if (wordDifficulty == WORD_DIFFICULTY_HARD) then tempStr = "Word difficulty: Hard";
    lenBuf = 0;
    for (var i = 1; i &lt;= string_length(tempStr); i++) {
        var col = c_black;
        var char = string_char_at(tempStr, i);

        if (i &gt; 17) {
            col = make_colour_hsv((120 + (i - 5) * 20 + colorRoll) mod 255, 200, 80);
        }
        draw_set_colour(col);
        draw_text_shadow_transformed(round(display_get_gui_width() / 2) + sin(global.letterSin + i / 10 + .5) * 5 - 1000 * (guessLetterFade + mainFade) - string_width(tempStr) / 2 + lenBuf - (1 - voteGraphicsFade) * 80, display_get_gui_height() / 2 + 130 + 100 * hangManFieldFade, char, 1, 1, 0, 1, 5);
        lenBuf += string_width(char);
    }
}

if (alarm[2] == -1 || global.guessState == 5 || (global.guessState == 0 &amp;&amp; global.gameState == GAME_STATE_VOTING)) {
    tempStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    global.messageY = 0;
    with(objMessage) {
        if (yy &gt; global.messageY)
            global.messageY = yy;
    }

    lenBuf = 0;
    for (var i = 1; i &lt;= string_length(tempStr); i++) {
        var col = c_black;
        var char = string_char_at(tempStr, i);
        var alp = .25;

        if (string_count(chr(i - 1 + UNICODE_UPPERCASE_OFFSET), usedLetters) == 0) {
            col = make_colour_hsv((120 + (i - 5) * 20 + colorRoll) mod 255, 200, 80);
            alp = 1;
        }

        draw_set_colour(col);
        draw_text_shadow_transformed(round(display_get_gui_width() / 2) + sin(global.letterSin + i / 10 + 1) * 5 + lenBuf - string_width(tempStr) / 2, h - 40 + 100 * max(1 - voteGraphicsFade, guessLetterFade, gameoverFade) - global.messageY * 30 + 40 * (mainFade * (1 + i / 10)), char, 1, 1, 0, alp, 5);
        lenBuf += string_width(char);
    }
}


draw_set_colour(c_black);

if (highscoreFade &gt; 0.0001) {
    draw_set_valign(fa_middle);
    draw_set_halign(fa_left);

    var gridH = ds_grid_height(global.leaderboard);
    var hXOffset = 0;
    var hXOffset2 = 0;
    var name = "";

    for (var i = 0; i &lt; 15; i++) {

        if (i % 2 == 0) {
            hXOffset = -(1 - min(1, highscoreFade * (1 + i / 10))) * 800;
        } else {
            hXOffset = (1 - min(1, highscoreFade * (1 + i / 10))) * 800;
        }
        hXOffset2 = -hXOffset + sin(colorRoll / 20 + i / 3) * 20;

        hXOffset += sin(colorRoll / 20 + i / 3) * 20;

        var scoreString = "";

        if (i &lt; gridH) {

            scoreString = "";
            var scoreStringSub = string(global.leaderboard[#1, i]);
            var scoreString = "";

            if (string_length(scoreStringSub) &lt;= 8) {
                var remain = 8 - string_length(scoreStringSub);
                repeat(remain) {
                    scoreString += "0";
                }
                scoreString += scoreStringSub;

            } else {
                scoreString = "99999999";
            }

            name = global.leaderboard[#0, i];
        } else {
            name = "Nobody";
            scoreString = "00000000";
        }

        var hYOffset = h / 2 - 240 + i * 32 + 30;

        var lineString = "";

        var x1 = w / 2 - 400 + hXOffset + string_width(name) + 6;
        var x2 = w / 2 + 400 + hXOffset2 - string_width(scoreString) + 15;

        while ((x1 + string_width(lineString) + 20) &lt; (x2 * highscoreFade)) {
            lineString += ".";
        }

        draw_set_colour(merge_colour(c_black, make_colour_hsv((colorRoll * 1.5 + i * 20) mod 255, 100, 155), (gridH - sz) / gridH));
        draw_text_shadow(x1, hYOffset, lineString, highscoreFade);


        draw_set_halign(fa_right);
        draw_text_shadow(w / 2 - 400 + hXOffset, hYOffset, string(i + 1) + ". ", highscoreFade);
        draw_text_shadow(w / 2 + 400 + hXOffset2, hYOffset, scoreString, highscoreFade);
        draw_set_halign(fa_left);
        draw_text_shadow(w / 2 - 400 + hXOffset, hYOffset, name, highscoreFade);

        draw_set_colour(c_black);
    }
    draw_set_halign(fa_left);
}

draw_set_valign(fa_top);
draw_set_halign(fa_left);

shader_reset();

draw_set_halign(fa_center);
draw_set_valign(fa_bottom);
texture_set_interpolation(0);

if (guessUserNameFade &gt; 0) {
    draw_set_halign(fa_left);
    var winString = guessUserName + " got it right, so they get " + string(winPts) + " points!";
    var winL = string_width(winString);
    var winOffset = 0;
    for (var i = 1; i &lt; winL; i++) {
        draw_set_colour(make_colour_hsv((colorRoll * 1.5 + i * 20) mod 255, 150, 155));
        draw_text_shadow(w / 2 - winL / 2 + winOffset + sin(colorRoll / 10 + i / 5) * 10, h + 20 - (h * .7) * guessUserNameFade + cos(colorRoll / 10 + i / 5) * 10, string_char_at(winString, i), guessUserNameFade);
        winOffset += string_width(string_char_at(winString, i));
    }
    draw_set_halign(fa_center);
}
draw_set_colour(c_black);

draw_set_font(fntWord);

with(objLetter) {

    var xs = 1;

    if (character = "M" || character = "X")
        xs = .9;

    if (revealFade &gt; 0) {
        yOff = round(100 * ((objControl.hangManFieldFade - objControl.guessLetterFade)) - (25 * objControl.guessLetterFade) - 10);
        if (objControl.mainFadeState == 0) {
            draw_set_colour(merge_colour(c_black, make_colour_hsv((objControl.colorRoll * 1.5 + pos * 20) mod 255, 150, 155), objControl.mainFade));
        }
        draw_text_shadow_transformed(round(display_get_gui_width() / 2 + 18 + offset - global.width / 2 + 5 + sin(global.letterSin + pos + .5) * 3) - (1 - objControl.voteGraphicsFade) * 80, display_get_gui_height() / 2 + 50 + yOff * (1 - objControl.mainFade) + (sin(objControl.colorRoll / 20 + pos) * 20) * objControl.mainFade + (objControl.wordMeltFade * 500) * (1 + ((sin(pos) + 1) / 2) * 5) + objControl.gameoverFade * 700, character, xs + (1 - revealFade), revealFade, 0, 1 - objControl.gameoverFade, 5);
    }
    draw_set_colour(c_black);
    if (character != " ") {
        yOff = round(100 * ((objControl.hangManFieldFade - objControl.guessLetterFade)) - (25 * objControl.guessLetterFade));
        draw_text_shadow_transformed(round(display_get_gui_width() / 2 + 22 + offset - global.width / 2 + 5 + sin(global.letterSin + pos + .6) * 3) - (1 - objControl.voteGraphicsFade) * 80, display_get_gui_height() / 2 + 50 + yOff + 600 * (objControl.mainFade * (1 + pos / 20)) + objControl.gameoverFade * 800, "_", 1, 1, 0, 1 - objControl.mainFade - objControl.gameoverFade, 5);
    }
}
draw_set_valign(fa_top);
draw_set_halign(fa_left);
texture_set_interpolation(1);

draw_set_font(fntMain);



if (voteGraphicsFade &lt; 0.9999) {

    draw_set_colour(c_black);
    draw_set_alpha(.333);

    draw_primitive_begin(pr_trianglestrip);
    for (var i = 0; i &lt;= 26; i++) {
        var xOffset = (voteGraphicsFade + voteGraphicsFade * (i / 5) * 1.1) * 100;
        var sn = sin(global.voteSin + i / 5) * 5 + xOffset;
        draw_vertex(w - 51 + sn, 45 + i * 24);
        draw_vertex(w - 21 + sn, 45 + i * 24);
    }
    draw_primitive_end();

    draw_set_colour(c_white);
    draw_set_alpha(1);

    //border
    draw_primitive_begin(pr_trianglestrip);
    for (var i = 0; i &lt;= 26; i++) {
        var xOffset = (voteGraphicsFade + voteGraphicsFade * ((i) / 5) * 1.1) * 100;
        var sn = sin(global.voteSin + i / 5) * 5 + xOffset;
        draw_vertex_colour(w - 55 + sn, 45 + i * 24, make_colour_hsv((i * 20 + colorRoll) mod 255, 200, 155), 1);
        draw_vertex_colour(w - 25 + sn, 45 + i * 24, make_colour_hsv((i * 20 + colorRoll) mod 255, 200, 155), 1);
    }
    draw_primitive_end();

    //darken
    draw_set_colour(c_ltgray);
    draw_set_blend_mode(bm_subtract);
    draw_primitive_begin(pr_trianglestrip);
    for (var i = 0; i &lt;= 26; i++) {
        var xOffset = (voteGraphicsFade + voteGraphicsFade * ((i) / 5) * 1.2) * 100;
        var sn = sin(global.voteSin + i / 5) * 5 + xOffset;
        draw_vertex(w - 52 + sn, 48 + i * 23.75);
        draw_vertex(w - 28 + sn, 48 + i * 23.75);
    }
    draw_primitive_end();
    draw_set_blend_mode(bm_normal);

    //main timer bar, forgive me for using absolute values
    for (var i = 0; i &lt;= 204; i++) {
        if (((204 - i) / 204) &gt; global.voteTimer / global.voteTimerMax) {
            voteTimerSegmentAlp[i] -= voteTimerSegmentAlp[i] / 10;
        } else {
            voteTimerSegmentAlp[i] = 1;
        }
    }

    for (var i = 0; i &lt;= 204; i++) {
        var subI = i / 8;
        var col = make_colour_hsv((subI * 20 + colorRoll) mod 255, 200, 155);
        var calcY = 0;
        var alp;
        var sine = sin(global.voteSin + subI / 5) * 5;
        var shake = median(0, (1 - (global.voteTimer + .5) / global.voteTimerMax), 1) * 3;
        var xOffset = (voteGraphicsFade + voteGraphicsFade * ((i) / 50)) * 100;

        if (i mod 2 == 1) {
            calcY = 2 - voteTimerSegmentAlp[i] * 2;
            alp = voteTimerSegmentAlp[i];
            var xshake = random_range(-shake, shake);

            draw_primitive_begin(pr_trianglestrip);
            draw_vertex_colour(w - 49 + sine + xshake + xOffset, 49 + subI * 24 + calcY, col, alp);
            draw_vertex_colour(w - 31 + sine + xshake + xOffset, 49 + subI * 24 + calcY, col, alp);
            draw_vertex_colour(w - 49 + sine + xshake + xOffset, 49 + subI * 24 + 2, col, alp);
            draw_vertex_colour(w - 31 + sine + xshake + xOffset, 49 + subI * 24 + 2, col, alp);
            draw_primitive_end();
        }

        if (i mod 2 == 0) {
            calcY = 2 - voteTimerSegmentAlp[i] * 2;
            alp = voteTimerSegmentAlp[i];
            var xshake = random_range(-shake, shake);
            var yshake = random_range(-shake, shake);

            draw_primitive_begin(pr_trianglestrip);
            draw_vertex_colour(w - 49 + sine + xshake + xOffset, 49 + subI * 24 + calcY, col, alp / 2);
            draw_vertex_colour(w - 31 + sine + xshake + xOffset, 49 + subI * 24 + calcY, col, alp / 2);
            draw_vertex_colour(w - 49 + sine + xshake + xOffset, 49 + subI * 24 + 2, col, alp / 2);
            draw_vertex_colour(w - 31 + sine + xshake + xOffset, 49 + subI * 24 + 2, col, alp / 2);
            draw_primitive_end();
        }
    }

    shader_set(shaderScribbly);
    shader_set_uniform_f(shader_get_uniform(shaderScribbly, "time"), time);

    draw_set_colour(c_white);
    draw_set_halign(fa_right);
    for (var i = 0; i &lt; 26; i++) {
        var pos2 = letterPos[letterVoteGrid[#0, i]];
        var val = 100 - i * 3;
        var char = chr(65 + letterVoteGrid[#0, i]);
        var intensity = letterIntensity[letterVoteGrid[#0, i]];
        var alp = 1;

        if (string_count(char, usedLetters) != 0) {
            alp = .25;
        }

        var xOffset = (voteGraphicsFade + voteGraphicsFade * ((i + 3) / 2) * 1.02) * 120;
        draw_set_colour(merge_colour(make_colour_hsv((pos2 * 20 + colorRoll) mod 255, 200, val), c_black, intensity));

        var str = letterVoteGrid[#1, i];
        if (alp == .25) {
            draw_set_colour(c_black);
            str = "X";
        }

        draw_text_shadow(w - 65 + sin(global.voteSin + pos2 / 5 + intensity * 7) * 5 + xOffset, 45 + pos2 * 24, str, alp);

        var xOffset = (voteGraphicsFade + voteGraphicsFade * ((i + 2) / 3) * 1.05) * 130;
        var val = 155 - i * 3;
        draw_set_colour(merge_colour(make_colour_hsv((pos2 * 20 + colorRoll) mod 255, 100, val), c_black, intensity));

        if (alp == .25) {
            draw_set_colour(c_black);
        }

        draw_text_shadow(w - 115 + sin(global.voteSin + pos2 / 5 + .5 + intensity * 10) * 5 + xOffset, 45 + pos2 * 24, char, alp);
    }
    draw_set_halign(fa_left);
    draw_set_colour(c_black);
    shader_reset();
}


if (guessLetterFade &gt; 0) {
    texture_set_interpolation(0);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_set_font(fntWord);
    var str = "";
    repeat(guessDots)
    str += ". ";

    draw_set_colour(c_black);

    draw_text_shadow_transformed(w / 3.9, h + 50 - guessLetterFade * 220 + sin(guessLetterSin - 1.4) * 30, global.check + "?", 2 - (1 - guessLetterFade) * 2, 2 + (1 - guessLetterFade) * 2, sin(guessLetterSin) * 10 * guessLetterFade, min(guessLetterFade * 2, 1), 10);

    for (var i = 0; i &lt; guessDots; i++) {
        draw_text_shadow_transformed(w / 4 * 1.65 + i * 60, h + 50 - guessLetterFade * 270 + sin(guessLetterSin + i * 1) * 30, ".", 2 - (1 - guessLetterFade) * 2, 2 + (1 - guessLetterFade) * 2, 0, min(guessLetterFade * 2, 1), 10);
    }
    draw_set_valign(fa_top);

    if (guessSignSpr == sprCheck) {
        draw_sprite_shadow(w / 4 * 2.9, h + 50 - guessLetterFade * 230 + sin(guessLetterSin + 6) * 30, guessSignSpr, guessSignSub, 6 - (3 - guessLetterFade * 3), 6 + (3 - guessLetterFade * 3), sin(guessLetterSin + 4.5) * 10 * guessLetterFade, 1, 10, $4EA174, $4EA174);
    }
    if (guessSignSpr == sprCross) {
        draw_sprite_shadow(w / 4 * 2.9, h + 50 - guessLetterFade * 230 + sin(guessLetterSin + 6) * 30, guessSignSpr, guessSignSub, 6 - (3 - guessLetterFade * 3), 6 + (3 - guessLetterFade * 3), sin(guessLetterSin + 4.5) * 10 * guessLetterFade, 1, 10, $6A67F2, $6A67F2);
    }

    texture_set_interpolation(1);
}

if (gameoverOverlayFade &gt; 0) {
    draw_set_colour(c_black);
    draw_set_alpha(min(gameoverOverlayFade, 1));
    draw_rectangle(0, 0, w, h, 0);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
